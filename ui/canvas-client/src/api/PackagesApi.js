/**
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HTTPValidationError from '../model/HTTPValidationError';
import ProjectPackage from '../model/ProjectPackage';
import ProjectPackageCreate from '../model/ProjectPackageCreate';
import ProjectPackageUpdate from '../model/ProjectPackageUpdate';

/**
 * Packages service.
 * @module api/PackagesApi
 * @version 0.1.0
 */
export default class PackagesApi {
  /**
   * Constructs a new PackagesApi.
   * @alias module:api/PackagesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createProjectPackageProjectsProjectIdPackagesPost operation.
   * @callback module:api/PackagesApi~createProjectPackageProjectsProjectIdPackagesPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProjectPackage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create Project Package
   * @param {String} projectId The ID of the project
   * @param {module:model/ProjectPackageCreate} projectPackageCreate
   * @param {module:api/PackagesApi~createProjectPackageProjectsProjectIdPackagesPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProjectPackage}
   */
  createProjectPackageProjectsProjectIdPackagesPost(
    projectId,
    projectPackageCreate,
    callback
  ) {
    let postBody = projectPackageCreate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling createProjectPackageProjectsProjectIdPackagesPost"
      );
    }
    // verify the required parameter 'projectPackageCreate' is set
    if (projectPackageCreate === undefined || projectPackageCreate === null) {
      throw new Error(
        "Missing the required parameter 'projectPackageCreate' when calling createProjectPackageProjectsProjectIdPackagesPost"
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ProjectPackage;
    return this.apiClient.callApi(
      '/projects/{project_id}/packages/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the deleteProjectPackageProjectsProjectIdPackagesPackageIdDelete operation.
   * @callback module:api/PackagesApi~deleteProjectPackageProjectsProjectIdPackagesPackageIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProjectPackage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete Project Package
   * @param {String} projectId The ID of the project
   * @param {String} packageId The ID of the package
   * @param {module:api/PackagesApi~deleteProjectPackageProjectsProjectIdPackagesPackageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProjectPackage}
   */
  deleteProjectPackageProjectsProjectIdPackagesPackageIdDelete(
    projectId,
    packageId,
    callback
  ) {
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling deleteProjectPackageProjectsProjectIdPackagesPackageIdDelete"
      );
    }
    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error(
        "Missing the required parameter 'packageId' when calling deleteProjectPackageProjectsProjectIdPackagesPackageIdDelete"
      );
    }

    let pathParams = {
      project_id: projectId,
      package_id: packageId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ProjectPackage;
    return this.apiClient.callApi(
      '/projects/{project_id}/packages/{package_id}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the deployProjectPackageProjectsProjectIdPackagesPackageIdDeployPost operation.
   * @callback module:api/PackagesApi~deployProjectPackageProjectsProjectIdPackagesPackageIdDeployPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProjectPackage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deploy Project Package
   * @param {String} projectId The ID of the project
   * @param {String} packageId The ID of the package
   * @param {module:api/PackagesApi~deployProjectPackageProjectsProjectIdPackagesPackageIdDeployPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProjectPackage}
   */
  deployProjectPackageProjectsProjectIdPackagesPackageIdDeployPost(
    projectId,
    packageId,
    callback
  ) {
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling deployProjectPackageProjectsProjectIdPackagesPackageIdDeployPost"
      );
    }
    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error(
        "Missing the required parameter 'packageId' when calling deployProjectPackageProjectsProjectIdPackagesPackageIdDeployPost"
      );
    }

    let pathParams = {
      project_id: projectId,
      package_id: packageId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ProjectPackage;
    return this.apiClient.callApi(
      '/projects/{project_id}/packages/{package_id}/deploy',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the destroyProjectPackageProjectsProjectIdPackagesPackageIdDestroyDelete operation.
   * @callback module:api/PackagesApi~destroyProjectPackageProjectsProjectIdPackagesPackageIdDestroyDeleteCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProjectPackage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Destroy Project Package
   * @param {String} projectId The ID of the project
   * @param {String} packageId The ID of the package
   * @param {module:api/PackagesApi~destroyProjectPackageProjectsProjectIdPackagesPackageIdDestroyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProjectPackage}
   */
  destroyProjectPackageProjectsProjectIdPackagesPackageIdDestroyDelete(
    projectId,
    packageId,
    callback
  ) {
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling destroyProjectPackageProjectsProjectIdPackagesPackageIdDestroyDelete"
      );
    }
    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error(
        "Missing the required parameter 'packageId' when calling destroyProjectPackageProjectsProjectIdPackagesPackageIdDestroyDelete"
      );
    }

    let pathParams = {
      project_id: projectId,
      package_id: packageId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ProjectPackage;
    return this.apiClient.callApi(
      '/projects/{project_id}/packages/{package_id}/destroy',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the getProjectPackageProjectsProjectIdPackagesPackageIdGet operation.
   * @callback module:api/PackagesApi~getProjectPackageProjectsProjectIdPackagesPackageIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProjectPackage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get Project Package
   * @param {String} projectId The ID of the project
   * @param {String} packageId The ID of the package
   * @param {module:api/PackagesApi~getProjectPackageProjectsProjectIdPackagesPackageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProjectPackage}
   */
  getProjectPackageProjectsProjectIdPackagesPackageIdGet(
    projectId,
    packageId,
    callback
  ) {
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling getProjectPackageProjectsProjectIdPackagesPackageIdGet"
      );
    }
    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error(
        "Missing the required parameter 'packageId' when calling getProjectPackageProjectsProjectIdPackagesPackageIdGet"
      );
    }

    let pathParams = {
      project_id: projectId,
      package_id: packageId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ProjectPackage;
    return this.apiClient.callApi(
      '/projects/{project_id}/packages/{package_id}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the listProjectPackagesProjectsProjectIdPackagesGet operation.
   * @callback module:api/PackagesApi~listProjectPackagesProjectsProjectIdPackagesGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/ProjectPackage>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * List Project Packages
   * @param {String} projectId The ID of the project
   * @param {Object} opts Optional parameters
   * @param {Number} [skip = 0)]
   * @param {Number} [limit = 100)]
   * @param {module:api/PackagesApi~listProjectPackagesProjectsProjectIdPackagesGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/ProjectPackage>}
   */
  listProjectPackagesProjectsProjectIdPackagesGet(projectId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling listProjectPackagesProjectsProjectIdPackagesGet"
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {
      skip: opts['skip'],
      limit: opts['limit'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [ProjectPackage];
    return this.apiClient.callApi(
      '/projects/{project_id}/packages/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the updateProjectPackageProjectsProjectIdPackagesPackageIdPatch operation.
   * @callback module:api/PackagesApi~updateProjectPackageProjectsProjectIdPackagesPackageIdPatchCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProjectPackage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update Project Package
   * @param {String} projectId The ID of the project
   * @param {String} packageId The ID of the package
   * @param {module:model/ProjectPackageUpdate} projectPackageUpdate
   * @param {module:api/PackagesApi~updateProjectPackageProjectsProjectIdPackagesPackageIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProjectPackage}
   */
  updateProjectPackageProjectsProjectIdPackagesPackageIdPatch(
    projectId,
    packageId,
    projectPackageUpdate,
    callback
  ) {
    let postBody = projectPackageUpdate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling updateProjectPackageProjectsProjectIdPackagesPackageIdPatch"
      );
    }
    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error(
        "Missing the required parameter 'packageId' when calling updateProjectPackageProjectsProjectIdPackagesPackageIdPatch"
      );
    }
    // verify the required parameter 'projectPackageUpdate' is set
    if (projectPackageUpdate === undefined || projectPackageUpdate === null) {
      throw new Error(
        "Missing the required parameter 'projectPackageUpdate' when calling updateProjectPackageProjectsProjectIdPackagesPackageIdPatch"
      );
    }

    let pathParams = {
      project_id: projectId,
      package_id: packageId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ProjectPackage;
    return this.apiClient.callApi(
      '/projects/{project_id}/packages/{package_id}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }

  /**
   * Callback function to receive the result of the updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatch operation.
   * @callback module:api/PackagesApi~updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatchCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ProjectPackage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update Project Package
   * @param {String} projectId The ID of the project
   * @param {String} packageId The ID of the package
   * @param {String} xCanvasToken
   * @param {module:model/ProjectPackageUpdate} projectPackageUpdate
   * @param {module:api/PackagesApi~updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ProjectPackage}
   */
  updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatch(
    projectId,
    packageId,
    xCanvasToken,
    projectPackageUpdate,
    callback
  ) {
    let postBody = projectPackageUpdate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatch"
      );
    }
    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error(
        "Missing the required parameter 'packageId' when calling updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatch"
      );
    }
    // verify the required parameter 'xCanvasToken' is set
    if (xCanvasToken === undefined || xCanvasToken === null) {
      throw new Error(
        "Missing the required parameter 'xCanvasToken' when calling updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatch"
      );
    }
    // verify the required parameter 'projectPackageUpdate' is set
    if (projectPackageUpdate === undefined || projectPackageUpdate === null) {
      throw new Error(
        "Missing the required parameter 'projectPackageUpdate' when calling updateProjectPackageProvisionerProjectsProjectIdPackagesPackageIdPatch"
      );
    }

    let pathParams = {
      project_id: projectId,
      package_id: packageId,
    };
    let queryParams = {};
    let headerParams = {
      'x-canvas-token': xCanvasToken,
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ProjectPackage;
    return this.apiClient.callApi(
      '/provisioner/projects/{project_id}/packages/{package_id}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback
    );
  }
}
